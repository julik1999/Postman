{
	"info": {
		"_postman_id": "d35ab2fa-cbbb-421c-9910-d0570490e218",
		"name": "HOMEWORK2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21318780"
	},
	"item": [
		{
			"name": "№1/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверка, что в body приходит правильный string\r",
							"pm.test(\"Body is correct\", function () {\r",
							"     pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "№2/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсили response и request и объявили переменные \r",
							"let resp = pm.response.json();\r",
							"let resp_name = resp.name;\r",
							"let resp_age = +resp.age;\r",
							"let resp_salary = resp.salary;\r",
							"let req = request.data;\r",
							"let req_name = req.name;\r",
							"let req_age = +req.age;\r",
							"let req_salary = +req.salary;\r",
							"let req_salary_1_5 = req_salary * 4;\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name response\", function () {\r",
							"    pm.expect(resp_name).to.eql(\"Julia\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age response\", function () {\r",
							"    pm.expect(resp_age).to.eql(23);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary response\", function () {\r",
							"    pm.expect(resp_salary).to.eql(50000);\r",
							"});\r",
							"\r",
							"//Теперь то же самое, только уже не руками, а забираем автоматически из reqest.\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name response\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age response\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary response\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"pm.test(\"response family\", function () {\r",
							"    console.log (resp.family);\r",
							"});\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check salary x4\", function () {\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(req_salary_1_5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Julia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "50000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "№3/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсили response и request(есть отличия парсинга Get запроса и Post[разные библиотеки]) и объявили переменные \r",
							"\r",
							"let resp = pm.response.json();\r",
							"let req = pm.request.url.query.toObject();\r",
							"let resp_name = resp.name;\r",
							"let resp_age = +resp.age;\r",
							"let resp_salary = +resp.salary;\r",
							"let req_name = req.name;\r",
							"let req_age = +req.age;\r",
							"let req_salary = +req.salary;\r",
							"let resp_family = resp.family;\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Check name response\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Check age response\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check salary response\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"\r",
							"pm.test(\"Console family response\", function () {\r",
							"    console.log(resp_family);\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"Check property name\", function () {\r",
							"    pm.expect(resp_family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							" \r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"Check property age\", function () {\r",
							"    pm.expect(resp_family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Check name response\", function () {\r",
							"    pm.expect(resp_family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Check age response\", function () {\r",
							"    pm.expect(resp_family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alice&age=30&salary=40000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alice"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "40000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "№4/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json и спарсить request.\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let req = pm.request.url.query.toObject();\r",
							"let resp_name = resp.name;\r",
							"let resp_age = +resp.age;\r",
							"let resp_salary = resp.salary;\r",
							"let resp_salary_0 = resp.salary[0]\r",
							"let resp_salary_1 = +resp.salary[1]\r",
							"let resp_salary_2 = +resp.salary[2]\r",
							"let req_name = req.name;\r",
							"let req_age = +req.age;\r",
							"let req_salary = +req.salary;\r",
							"\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check resp name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Check resp age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"\r",
							"pm.test(\"Console salary req\", function () {\r",
							"    console.log(req_salary)\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"\r",
							"pm.test(\"Console salary resp\", function () {\r",
							"    console.log(resp_salary)\r",
							"});\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"pm.test(\"Console salary resp 0\", function () {\r",
							"    console.log(resp_salary_0)\r",
							"});\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"pm.test(\"Console salary resp 1\", function () {\r",
							"    console.log(resp_salary_1)\r",
							"});\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"pm.test(\"Console salary resp 2\", function () {\r",
							"    console.log(resp_salary_2)\r",
							"});\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check resq salary 0\", function () {\r",
							"    pm.expect(resp_salary_0).to.eql(req_salary)\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check resq salary 1\", function () {\r",
							"    pm.expect(resp_salary_1).to.eql(req_salary*2)\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check resq salary 2\", function () {\r",
							"    pm.expect(resp_salary_2).to.eql(req_salary*3)\r",
							"});\r",
							"\r",
							"//Передать в окружение переменную name, age, salary\r",
							"\r",
							"pm.environment.set(\"name\", req_name);\r",
							"pm.environment.set(\"age\", req_age);\r",
							"pm.environment.set(\"salary\", req_salary);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"let salary_all = [resp_salary_0,resp_salary_1,resp_salary_2]\r",
							"\r",
							"while (salary_all <= 2){\r",
							"    console.log(salary_all)\r",
							"    salary_all++\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Elena&age=47&salary=20000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Elena"
						},
						{
							"key": "age",
							"value": "47"
						},
						{
							"key": "salary",
							"value": "20000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "№5/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в request\r",
							"//Вставить параметр age из окружения в age\r",
							"//Вставить параметр name из окружения в name\r",
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json и request (+объявлены переменные)\r",
							"\r",
							"let body_resp = pm.response.json();\r",
							"let body_req = request.data;\r",
							"let req_salary = +body_req.salary\r",
							"let req_age = +body_req.age\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"Check params start qa salary\", function () {\r",
							"    pm.expect(body_resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"Check params qa_salary_after_6_months\", function () {\r",
							"    pm.expect(body_resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"Check params qa_salary_after_12_months\", function () {\r",
							"    pm.expect(body_resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"Check params qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(body_resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"Check params qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(body_resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"Check params person\", function () {\r",
							"    pm.expect(body_resp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check params salary resp = req\", function () {\r",
							"   pm.expect(body_resp.start_qa_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check params qa_salary_after_6_months = req*2\", function () {\r",
							"   pm.expect(body_resp.qa_salary_after_6_months).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"\r",
							"pm.test(\"Check params qa_salary_after_12_months = req*2.7\", function () {\r",
							"   pm.expect(body_resp.qa_salary_after_12_months).to.eql(req_salary*2.7);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check params qa_salary_after_1.5_year = req*3.3\", function () {\r",
							"   pm.expect(body_resp[\"qa_salary_after_1.5_year\"]).to.eql(req_salary*3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"\r",
							"pm.test(\"Check params qa_salary_after_3.5_years = req*3.8\", function () {\r",
							"   pm.expect(body_resp[\"qa_salary_after_3.5_years\"]).to.eql(req_salary*3.8);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check  element 1  = req salary\", function () {\r",
							"   pm.expect(body_resp.person.u_name[1]).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Check  u_age  = req age\", function () {\r",
							"   pm.expect(body_resp.person.u_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check  u_salary_5_years  = salary*4.2\", function () {\r",
							"   pm.expect(body_resp.person.u_salary_5_years).to.eql(req_salary*4.2);\r",
							"});\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for (let i in body_resp.person) {\r",
							"console.log(\"element:\", i);\r",
							"};\r",
							"\r",
							"for (let i in body_resp.person.u_salary_5_years) {\r",
							"console.log(\"element:\", i);\r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}